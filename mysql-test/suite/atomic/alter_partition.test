--source include/have_partition.inc
--source include/have_debug.inc
--source include/have_sequence.inc
--source include/have_innodb.inc
--source include/log_bin.inc
--source include/not_valgrind.inc

let $default_engine=InnoDB;
let $extra_option=;
let $save_debug=`select @@debug_dbug`;

if ($MTR_COMBINATION_MYISAM)
{
  let $default_engine=MyISAM;
}
if ($MTR_COMBINATION_ARIA)
{
  let $default_engine=Aria;
  let $extra_option=transactional=1;
}

if ($MTR_COMBINATION_STMT)
{
  let $binlog_format=include/set_binlog_format_statement.sql;
}
if ($MTR_COMBINATION_ROW)
{
  let $binlog_format=include/set_binlog_format_row.sql;
}
if ($MTR_COMBINATION_MIX)
{
  --skip same as stmt
}

--eval set @@default_storage_engine=$default_engine

--echo # Crash recovery

let $MYSQLD_DATADIR= `SELECT @@datadir`;

let $crash_count= 11;
let $crash_points='ddl_log_create_before_create_frm',
                  'ddl_log_alter_partition_after_create_frm',
                  'ddl_log_alter_partition_after_write_frm',
                  'crash_extract_partition_1',
                  'crash_extract_partition_2',
                  'crash_extract_partition_3',
                  'crash_extract_partition_4',
                  'crash_extract_partition_5',
                  'crash_extract_partition_7',
                  'crash_extract_partition_8',
                  'crash_extract_partition_9';

#let $crash_count= 1;
#let $crash_points= 'crash_extract_partition_9';

let $statement_count= 1;
let $statements= 'ALTER TABLE t1 EXTRACT PARTITION p1 AS TABLE tp1';

#let $statement_count=1;
#let $statements='CREATE OR REPLACE TABLE t1 SELECT * from const_table';

--delimiter $
create or replace procedure prepare_table()
begin
  create or replace table t1 (x int)
  with system versioning
  partition by range(x) (
    partition p0 values less than (10),
    partition p1 values less than (20),
    partition pn values less than maxvalue);
  insert into t1 values (2), (12), (22);
  flush tables;
end $
--delimiter ;

let $old_debug=`select @@debug_dbug`;

let $keep_include_silent=1;
let $grep_script=ALTER;
--disable_query_log

let $r=0;
while ($r < $statement_count)
{
  inc $r;
  let $statement=`select ELT($r, $statements)`;
  --echo # QUERY: $statement

  let $c=0;
  while ($c < $crash_count)
  {
    inc $c;
    let $crash=`select ELT($c, $crash_points)`;

    --eval set @@default_storage_engine=$default_engine
    call prepare_table;
    if (!$c)
    {
      lock tables t1 write;
    }

    --source $binlog_format

    RESET MASTER;
    --echo # CRASH POINT: $crash
    --exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
    --disable_reconnect
    --eval set @@debug_dbug="+d,$crash",@debug_crash_counter=1
    let $errno=0;
    --error 0,2013
    --eval $statement;
    let $error=$errno;
    --enable_reconnect
    --source include/wait_until_connected_again.inc
    --disable_query_log
    --eval set @@debug_dbug="$old_debug"

    if ($error == 0)
    {
      --echo # No crash!
    }
    # Check which tables still exists
    --list_files $MYSQLD_DATADIR/test t*
    --list_files $MYSQLD_DATADIR/test *sql*

    --let $binlog_file=master-bin.000001
    --source include/show_binlog_events.inc
    if ($error)
    {
      --let $binlog_file=master-bin.000002
      --source include/show_binlog_events.inc
    }

    --replace_result $default_engine DEFAULT_ENGINE ' PAGE_CHECKSUM=1' ''
    show create table t1;
    select * from t1;
    --replace_result $default_engine DEFAULT_ENGINE ' PAGE_CHECKSUM=1' ''
    --error 0, ER_NO_SUCH_TABLE
    show create table tp1;
    --error 0, ER_NO_SUCH_TABLE
    select * from tp1;
    # Drop the tables. The warnings will show what was dropped
    --disable_warnings
    drop table t1;
    drop table if exists tp1;
    --enable_warnings
  }
}
drop table if exists t1;
drop procedure prepare_table;
--eval set @@debug_dbug="$save_debug"

--enable_query_log
